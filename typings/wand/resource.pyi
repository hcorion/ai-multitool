"""
This type stub file was generated by pyright.
"""

import atexit
import contextlib
from .compat import abc
from .exceptions import WandException

""":mod:`wand.resource` --- Global resource management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is the global resource to manage in MagickWand API. This module
implements automatic global resource management through reference counting.

"""
__all__ = ('genesis', 'limits', 'shutdown', 'terminus', 'DestroyedResourceError', 'Resource', 'ResourceLimits')
def genesis(): # -> None:
    """Instantiates the MagickWand API.

    .. warning::

       Don't call this function directly. Use :func:`increment_refcount()` and
       :func:`decrement_refcount()` functions instead.

    """
    ...

def terminus(): # -> None:
    """Cleans up the MagickWand API.

    .. warning::

       Don't call this function directly. Use :func:`increment_refcount()` and
       :func:`decrement_refcount()` functions instead.

    """
    ...

allocation_map = ...
def allocate_ref(addr, deallocator): # -> None:
    ...

def deallocate_ref(addr): # -> None:
    ...

@atexit.register
def shutdown(): # -> None:
    ...

class Resource:
    """Abstract base class for MagickWand object that requires resource
    management. Its all subclasses manage the resource semiautomatically
    and support :keyword:`with` statement as well::

        with Resource() as resource:
            # use the resource...
            pass

    It doesn't implement constructor by itself, so subclasses should
    implement it. Every constructor should assign the pointer of its
    resource data into :attr:`resource` attribute inside of :keyword:`with`
    :meth:`allocate()` context.  For example::

        class Pizza(Resource):
            '''My pizza yummy.'''

            def __init__(self):
                with self.allocate():
                    self.resource = library.NewPizza()

    .. versionadded:: 0.1.2

    """
    c_is_resource = ...
    c_destroy_resource = ...
    c_get_exception = ...
    c_clear_exception = ...
    @property
    def resource(self): # -> None:
        """Internal pointer to the resource instance. It may raise
        :exc:`DestroyedResourceError` when the resource has destroyed already.

        """
        ...
    
    @resource.setter
    def resource(self, resource): # -> None:
        ...
    
    @resource.deleter
    def resource(self): # -> None:
        ...
    
    @contextlib.contextmanager
    def allocate(self): # -> Generator[Self, Any, None]:
        """Allocates the memory for the resource explicitly. Its subclasses
        should assign the created resource into :attr:`resource` attribute
        inside of this context. For example::

            with resource.allocate():
                resource.resource = library.NewResource()

        """
        ...
    
    def destroy(self): # -> None:
        """Cleans up the resource explicitly. If you use the resource in
        :keyword:`with` statement, it was called implicitly so have not to
        call it.

        """
        ...
    
    def get_exception(self): # -> BlobError | BlobFatalError | BlobWarning | CacheError | CacheFatalError | CacheWarning | CoderError | CoderFatalError | CoderWarning | ConfigureError | ConfigureFatalError | ConfigureWarning | CorruptImageError | CorruptImageFatalError | CorruptImageWarning | DelegateError | DelegateFatalError | DelegateWarning | DrawError | DrawFatalError | DrawWarning | FileOpenError | FileOpenFatalError | FileOpenWarning | ImageError | ImageFatalError | ImageWarning | MissingDelegateError | MissingDelegateFatalError | MissingDelegateWarning | ModuleError | ModuleFatalError | ModuleWarning | MonitorError | MonitorFatalError | MonitorWarning | OptionError | OptionFatalError | OptionWarning | PolicyError | PolicyFatalError | PolicyWarning | RandomError | RandomFatalError | RandomWarning | RegistryError | RegistryFatalError | RegistryWarning | ResourceLimitError | ResourceLimitFatalError | ResourceLimitWarning | StreamError | StreamFatalError | StreamWarning | TypeError | TypeFatalError | TypeWarning | WandError | WandFatalError | WandWarning | XServerError | XServerFatalError | XServerWarning | None:
        """Gets a current exception instance.

        :returns: a current exception. it can be ``None`` as well if any
                  errors aren't occurred
        :rtype: :class:`wand.exceptions.WandException`

        """
        ...
    
    def raise_exception(self, stacklevel=...): # -> None:
        """Raises an exception or warning if it has occurred."""
        ...
    
    def make_blob(self, format=...):
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, type, value, traceback): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    


class DestroyedResourceError(WandException, ReferenceError, AttributeError):
    """An error that rises when some code tries access to an already
    destroyed resource.

    .. versionchanged:: 0.3.0
       It becomes a subtype of :exc:`wand.exceptions.WandException`.

    """
    ...


class ResourceLimits(abc.MutableMapping):
    """Wrapper for MagickCore resource limits.
    Useful for dynamically reducing system resources before attempting risky,
    or slow running, :class:`~wand.image.Image` operations.

    For example::

       from wand.image import Image
       from wand.resource import limits

       # Use 100MB of ram before writing temp data to disk.
       limits['memory'] = 1024 * 1024 * 100
       # Reject images larger than 1000x1000.
       limits['width'] = 1000
       limits['height'] = 1000

       # Debug resources used.
       with Image(filename='user.jpg') as img:
           print('Using {0} of {1} memory'.format(limits.resource('memory'),
                                                  limits['memory']))

       # Dump list of all limits.
       for label in limits:
           print('{0} => {1}'.format(label, limits[label]))

    Available resource keys:

    - ``'area'`` - Maximum `width * height` of a pixel cache before writing to
      disk.
    - ``'disk'`` - Maximum bytes used by pixel cache on disk before exception
      is thrown.
    - ``'file'`` - Maximum cache files opened at any given time.
    - ``'height'`` - Maximum height of image before exception is thrown.
    - ``'list_length'`` - Maximum images in sequence. Only available with
      recent version of ImageMagick.
    - ``'map'`` - Maximum memory map in bytes to allocated for pixel cache
      before using disk.
    - ``'memory'`` - Maximum bytes to allocated for pixel cache before using
      disk.
    - ``'thread'`` - Maximum parallel task sub-routines can spawn - if using
      OpenMP.
    - ``'throttle'`` - Total milliseconds to yield to CPU - if possible.
    - ``'time'`` - Maximum seconds before exception is thrown.
    - ``'width'`` - Maximum width of image before exception is thrown.

    .. versionadded:: 0.5.1
    """
    _limits6 = ...
    _limits7 = ...
    def __init__(self) -> None:
        ...
    
    def __getitem__(self, r): # -> Any:
        ...
    
    def __setitem__(self, r, v): # -> None:
        ...
    
    def __delitem__(self, r): # -> None:
        ...
    
    def __iter__(self): # -> Iterator[Literal['undefined', 'area', 'disk', 'file', 'height', 'map', 'memory', 'thread', 'throttle', 'time', 'width', 'list_length']]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def resource(self, resource): # -> Any:
        """Get the current value for the resource type.

        :param resource: Resource type.
        :type resource: :class:`basestring`
        :rtype: :class:`numeric.Integral`

        .. versionadded:: 0.5.1
        """
        ...
    
    def get_resource_limit(self, resource): # -> Any:
        """Get the current limit for the resource type.

        :param resource: Resource type.
        :type resource: :class:`basestring`
        :rtype: :class:`numeric.Integral`

        .. versionadded:: 0.5.1
        """
        ...
    
    def set_resource_limit(self, resource, limit): # -> None:
        """Sets a new limit for resource type.

        .. note::

            The new limit value must be equal to or less than the maximum
            limit defined by the :file:`policy.xml`. Any values set outside
            normal bounds will be ignored silently.

        :param resource: Resource type.
        :type resource: :class:`basestring`
        :param limit: New limit value.
        :type limit: :class:`numeric.Integral`

        .. versionadded:: 0.5.1
        """
        ...
    


limits = ...
