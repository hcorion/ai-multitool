"""
This type stub file was generated by pyright.
"""

from .resource import Resource

""":mod:`wand.color` --- Colors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 0.1.2

"""
__all__ = ('Color', 'scale_quantum_to_int8')
class Color(Resource):
    """Color value.

    Unlike other objects in Wand, its resource management can be
    implicit when used outside of a :keyword:`with` block. In these cases,
    its resource is allocated for every operation which requires a resource
    and destroyed immediately. Of course it is inefficient when many
    operations are applied, so to avoid it, you should use color objects
    inside of an explicit :keyword:`with` block, e.g.::

        red_count = 0
        with Color('#f00') as red:
            with Image(filename='image.png') as img:
                for row in img:
                    for col in row:
                        if col == red:
                            red_count += 1

    :param string: a color name string e.g. ``'rgb(255, 255, 255)'``,
                   ``'#fff'``, ``'white'``. see `ImageMagick Color Names`_
                   doc also
    :type string: :class:`basestring`

    .. versionchanged:: 0.3.0
       :class:`Color` objects become hashable.

    .. versionchanged:: 0.5.1
       Color channel properties can now be set.

    .. versionchanged:: 0.5.1
       Added :attr:`cyan`, :attr:`magenta`, :attr:`yellow`, & :attr:`black`
       properties for CMYK :class:`Color` instances.

    .. versionchanged:: 0.5.1
       Method :meth:`Color.from_hsl()` can create a RGB color from ``hue``,
       ``saturation``, & ``lightness`` values.

    .. seealso::

       `ImageMagick Color Names`_
          The color can then be given as a color name (there is a limited
          but large set of these; see below) or it can be given as a set
          of numbers (in decimal or hexadecimal), each corresponding to
          a channel in an RGB or RGBA color model. HSL, HSLA, HSB, HSBA,
          CMYK, or CMYKA color models may also be specified. These topics
          are briefly described in the sections below.

    .. _ImageMagick Color Names: http://www.imagemagick.org/script/color.php

    .. describe:: == (other)

       Equality operator.

       :param other: a color another one
       :type color: :class:`Color`
       :returns: ``True`` only if two images equal.
       :rtype: :class:`bool`

    """
    dirty = ...
    c_is_resource = ...
    c_destroy_resource = ...
    c_get_exception = ...
    c_clear_exception = ...
    __slots__ = ...
    def __init__(self, string=..., raw=...) -> None:
        ...
    
    def __getinitargs__(self): # -> tuple[bytes | None, None]:
        ...
    
    def __enter__(self): # -> Resource:
        ...
    
    def __exit__(self, type, value, traceback): # -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @staticmethod
    def c_equals(a, b): # -> bool:
        """Raw level version of equality test function for two pixels.

        :param a: a pointer to PixelWand to compare
        :type a: :class:`ctypes.c_void_p`
        :param b: a pointer to PixelWand to compare
        :type b: :class:`ctypes.c_void_p`
        :returns: ``True`` only if two pixels equal
        :rtype: :class:`bool`

        .. note::

           It's only for internal use. Don't use it directly.
           Use ``==`` operator of :class:`Color` instead.

        """
        ...
    
    @classmethod
    def from_hsl(cls, hue=..., saturation=..., lightness=...): # -> Self:
        """Creates a RGB color from HSL values. The ``hue``, ``saturation``,
        and ``lightness`` must be normalized between 0.0 & 1.0.

        .. code::

            h=0.75  # 270 Degrees
            s=1.0   # 100 Percent
            l=0.5   # 50 Percent
            with Color.from_hsl(hue=h, saturation=s, lightness=l) as color:
                print(color)  #=> srgb(128,0,255)

        :param hue: a normalized double between 0.0 & 1.0.
        :type hue: :class:`numbers.Real`
        :param saturation: a normalized double between 0.0 & 1.0.
        :type saturation: :class:`numbers.Real`
        :param lightness: a normalized double between 0.0 & 1.0.
        :type lightness: :class:`numbers.Real`
        :rtype: :class:`Color`

        .. versionadded:: 0.5.1
        """
        ...
    
    @classmethod
    def from_pixelwand(cls, pixelwand): # -> Self:
        ...
    
    @property
    def alpha(self): # -> Any:
        """(:class:`numbers.Real`) Alpha value, from 0.0 to 1.0."""
        ...
    
    @alpha.setter
    def alpha(self, value): # -> None:
        ...
    
    @property
    def alpha_int8(self): # -> int:
        """(:class:`numbers.Integral`) Alpha value as 8bit integer which is
        a common style.  From 0 to 255.

        .. versionadded:: 0.3.0

        """
        ...
    
    @alpha_int8.setter
    def alpha_int8(self, value): # -> None:
        ...
    
    @property
    def alpha_quantum(self): # -> Any:
        """(:class:`numbers.Integral`) Alpha value.
        Scale depends on :const:`~wand.version.QUANTUM_DEPTH`.

        .. versionadded:: 0.3.0

        """
        ...
    
    @alpha_quantum.setter
    def alpha_quantum(self, value): # -> None:
        ...
    
    @property
    def black(self): # -> Any:
        """(:class:`numbers.Real`) Black, or ``'K'``, color channel in CMYK
        colorspace. Unused by RGB colorspace.

        .. versionadded:: 0.5.1
        """
        ...
    
    @black.setter
    def black(self, value): # -> None:
        ...
    
    @property
    def black_int8(self): # -> int:
        """(:class:`numbers.Integral`) Black value as 8bit integer which is
        a common style.  From 0 to 255.

        .. versionadded:: 0.5.1
        """
        ...
    
    @black_int8.setter
    def black_int8(self, value): # -> None:
        ...
    
    @property
    def black_quantum(self): # -> Any:
        """(:class:`numbers.Integral`) Black.
        Scale depends on :const:`~wand.version.QUANTUM_DEPTH`.

        .. versionadded:: 0.5.1
        """
        ...
    
    @black_quantum.setter
    def black_quantum(self, value): # -> None:
        ...
    
    @property
    def blue(self): # -> Any:
        """(:class:`numbers.Real`) Blue, from 0.0 to 1.0."""
        ...
    
    @blue.setter
    def blue(self, value): # -> None:
        ...
    
    @property
    def blue_int8(self): # -> int:
        """(:class:`numbers.Integral`) Blue as 8bit integer which is
        a common style.  From 0 to 255.

        .. versionadded:: 0.3.0

        """
        ...
    
    @blue_int8.setter
    def blue_int8(self, value): # -> None:
        ...
    
    @property
    def blue_quantum(self): # -> Any:
        """(:class:`numbers.Integral`) Blue.
        Scale depends on :const:`~wand.version.QUANTUM_DEPTH`.

        .. versionadded:: 0.3.0

        """
        ...
    
    @blue_quantum.setter
    def blue_quantum(self, value): # -> None:
        ...
    
    @property
    def cyan(self): # -> Any:
        """(:class:`numbers.Real`) Cyan color channel in CMYK
        colorspace. Unused by RGB colorspace.

        .. versionadded:: 0.5.1
        """
        ...
    
    @cyan.setter
    def cyan(self, value): # -> None:
        ...
    
    @property
    def cyan_int8(self): # -> int:
        """(:class:`numbers.Integral`) Cyan value as 8bit integer which is
        a common style.  From 0 to 255.

        .. versionadded:: 0.5.1
        """
        ...
    
    @cyan_int8.setter
    def cyan_int8(self, value): # -> None:
        ...
    
    @property
    def cyan_quantum(self): # -> Any:
        """(:class:`numbers.Integral`) Cyan.
        Scale depends on :const:`~wand.version.QUANTUM_DEPTH`.

        .. versionadded:: 0.5.1
        """
        ...
    
    @cyan_quantum.setter
    def cyan_quantum(self, value): # -> None:
        ...
    
    @property
    def fuzz(self): # -> Any:
        ...
    
    @fuzz.setter
    def fuzz(self, value): # -> None:
        ...
    
    @property
    def green(self): # -> Any:
        """(:class:`numbers.Real`) Green, from 0.0 to 1.0."""
        ...
    
    @green.setter
    def green(self, value): # -> None:
        ...
    
    @property
    def green_int8(self): # -> int:
        """(:class:`numbers.Integral`) Green as 8bit integer which is
        a common style.  From 0 to 255.

        .. versionadded:: 0.3.0

        """
        ...
    
    @green_int8.setter
    def green_int8(self, value): # -> None:
        ...
    
    @property
    def green_quantum(self): # -> Any:
        """(:class:`numbers.Integral`) Green.
        Scale depends on :const:`~wand.version.QUANTUM_DEPTH`.

        .. versionadded:: 0.3.0

        """
        ...
    
    @green_quantum.setter
    def green_quantum(self, value): # -> None:
        ...
    
    @property
    def magenta(self): # -> Any:
        """(:class:`numbers.Real`) Magenta color channel in CMYK
        colorspace. Unused by RGB colorspace.

        .. versionadded:: 0.5.1
        """
        ...
    
    @magenta.setter
    def magenta(self, value): # -> None:
        ...
    
    @property
    def magenta_int8(self): # -> int:
        """(:class:`numbers.Integral`) Magenta value as 8bit integer which is
        a common style.  From 0 to 255.

        .. versionadded:: 0.5.1
        """
        ...
    
    @magenta_int8.setter
    def magenta_int8(self, value): # -> None:
        ...
    
    @property
    def magenta_quantum(self): # -> Any:
        ...
    
    @magenta_quantum.setter
    def magenta_quantum(self, value): # -> None:
        """(:class:`numbers.Integral`) Magenta.
        Scale depends on :const:`~wand.version.QUANTUM_DEPTH`.

        .. versionadded:: 0.5.1
        """
        ...
    
    @property
    def normalized_string(self): # -> bytes | None:
        """(:class:`basestring`) The normalized string representation of
        the color.  The same color is always represented to the same
        string.

        .. versionadded:: 0.3.0

        """
        ...
    
    @property
    def red(self): # -> Any:
        """(:class:`numbers.Real`) Red, from 0.0 to 1.0."""
        ...
    
    @red.setter
    def red(self, value): # -> None:
        ...
    
    @property
    def red_int8(self): # -> int:
        """(:class:`numbers.Integral`) Red as 8bit integer which is a common
        style.  From 0 to 255.

        .. versionadded:: 0.3.0

        """
        ...
    
    @red_int8.setter
    def red_int8(self, value): # -> None:
        ...
    
    @property
    def red_quantum(self): # -> Any:
        """(:class:`numbers.Integral`) Red.
        Scale depends on :const:`~wand.version.QUANTUM_DEPTH`.

        .. versionadded:: 0.3.0

        """
        ...
    
    @red_quantum.setter
    def red_quantum(self, value): # -> None:
        ...
    
    @property
    def string(self): # -> bytes | None:
        """(:class:`basestring`) The string representation of the color."""
        ...
    
    @property
    def yellow(self): # -> Any:
        """(:class:`numbers.Real`) Yellow color channel in CMYK
        colorspace. Unused by RGB colorspace.

        .. versionadded:: 0.5.1
        """
        ...
    
    @yellow.setter
    def yellow(self, value): # -> None:
        ...
    
    @property
    def yellow_int8(self): # -> int:
        """(:class:`numbers.Integral`) Yellow as 8bit integer which is a common
        style. From 0 to 255.

        .. versionadded:: 0.5.1
        """
        ...
    
    @yellow_int8.setter
    def yellow_int8(self, value): # -> None:
        ...
    
    @property
    def yellow_quantum(self): # -> Any:
        """(:class:`numbers.Integral`) Yellow.
        Scale depends on :const:`~wand.version.QUANTUM_DEPTH`.

        .. versionadded:: 0.5.1
        """
        ...
    
    @yellow_quantum.setter
    def yellow_quantum(self, value): # -> None:
        ...
    
    def hsl(self): # -> tuple[float, float, float]:
        """Calculate the HSL color values from the RGB color.

        :returns: Tuple containing three normalized doubles, between 0.0 &
                  1.0, representing ``hue``, ``saturation``, and ``lightness``.
        :rtype: :class:`collections.Sequence`

        .. versionadded:: 0.5.1
        """
        ...
    


def scale_quantum_to_int8(quantum): # -> int:
    """Straightforward port of :c:func:`ScaleQuantumToChar()` inline
    function.

    .. deprecated:: 0.6.6

    :param quantum: quantum value
    :type quantum: :class:`numbers.Integral`
    :returns: 8bit integer of the given ``quantum`` value
    :rtype: :class:`numbers.Integral`

    .. versionadded:: 0.3.0
    .. versionchanged:: 0.5.0
        Added HDRI support
    """
    ...

