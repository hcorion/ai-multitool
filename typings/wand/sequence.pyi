"""
This type stub file was generated by pyright.
"""

import contextlib
from .compat import abc
from .image import BaseImage, ImageProperty

""":mod:`wand.sequence` --- Sequences
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 0.3.0

"""
__all__ = ('Sequence', 'SingleImage')
class Sequence(ImageProperty, abc.MutableSequence):
    """The list-like object that contains every :class:`SingleImage`
    in the :class:`~wand.image.Image` container.  It implements
    :class:`collections.abc.Sequence` protocol.

    .. versionadded:: 0.3.0

    """
    def __init__(self, image) -> None:
        ...
    
    @property
    def current_index(self): # -> Any:
        """(:class:`numbers.Integral`) The current index of
        its internal iterator.

        .. note::

           It's only for internal use.

        """
        ...
    
    @current_index.setter
    def current_index(self, index): # -> None:
        ...
    
    @contextlib.contextmanager
    def index_context(self, index): # -> Generator[_ComplexLike | Integral, Any, None]:
        """Scoped setter of :attr:`current_index`.  Should be
        used for :keyword:`with` statement e.g.::

            with image.sequence.index_context(3):
                print(image.size)

        .. note::

           It's only for internal use.

        """
        ...
    
    def __len__(self): # -> Any:
        ...
    
    def validate_position(self, index): # -> _ComplexLike | Integral:
        ...
    
    def validate_slice(self, slice_, as_range=...): # -> range | slice[int, int, Any]:
        ...
    
    def __getitem__(self, index): # -> list[list[Any] | Any | SingleImage] | SingleImage:
        ...
    
    def __setitem__(self, index, image): # -> None:
        ...
    
    def __delitem__(self, index): # -> None:
        ...
    
    def insert(self, index, image): # -> None:
        ...
    
    def append(self, image): # -> None:
        ...
    
    def extend(self, images, offset=...): # -> None:
        ...
    


class SingleImage(BaseImage):
    """Each single image in :class:`~wand.image.Image` container.
    For example, it can be a frame of GIF animation.

    Note that all changes on single images are invisible to their
    containers unless they are altered a ``with ...`` context manager.

        with Image(filename='animation.gif') as container:
            with container.sequence[0] as frame:
                frame.negate()

    .. versionadded:: 0.3.0

    .. versionchanged:: 0.5.1
       Only sync changes of a :class:`SingleImage` when exiting a ``with ...``
       context. Not when parent :class:`~wand.image.Image` closes.
    """
    container = ...
    def __init__(self, wand, container, c_original_resource) -> None:
        ...
    
    @property
    def sequence(self): # -> tuple[Self]:
        ...
    
    @property
    def index(self): # -> int:
        """(:class:`numbers.Integral`) The index of the single image in
        the :attr:`container` image.

        """
        ...
    
    @property
    def delay(self): # -> Any | Integral:
        """(:class:`numbers.Integral`) The delay to pause before display
        the next image (in the :attr:`~wand.image.BaseImage.sequence` of
        its :attr:`container`).  It's hundredths of a second.

        """
        ...
    
    @delay.setter
    def delay(self, delay): # -> None:
        ...
    
    def __exit__(self, type_, value, traceback): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


